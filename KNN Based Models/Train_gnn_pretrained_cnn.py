# -*- coding: utf-8 -*-
"""GNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M060GLWriMFjE8wxm-djUd8RwQSypcTG
"""

from torch_geometric.data import Data
from sklearn.neighbors import kneighbors_graph
import numpy as np
import torch.nn as nn
import torch
from torch_geometric.nn import GCNConv, global_mean_pool
import torch.nn.functional as F

def create_graph_from_cnn_features(cnn_output, label, k=4):
    """
    cnn_output: Tensor [channels, features]
    label: Integer label for the sample
    """
    # Step 1: k-NN graph based on CNN features
    cnn_output_np = cnn_output.detach().cpu().numpy()
    adj = kneighbors_graph(cnn_output_np, k, mode='connectivity', include_self=False)
    edge_index = torch.tensor(np.array(adj.nonzero()), dtype=torch.long)

    # Step 2: Create graph data object
    data = Data(x=cnn_output, edge_index=edge_index, y=torch.tensor([label]))
    return data

class ResidualBlock3Conv(nn.Module):
    def __init__(self, channels, kernel_size=3):
        super(ResidualBlock3Conv, self).__init__()
        padding = kernel_size // 2
        self.block = nn.Sequential(
            nn.Conv1d(channels, channels, kernel_size, padding=padding),
            nn.ReLU(),
            nn.Conv1d(channels, channels, kernel_size, padding=padding),
            nn.ReLU(),
            nn.Conv1d(channels, channels, kernel_size, padding=padding),
        )
        self.relu = nn.ReLU()

    def forward(self, x):
        return self.relu(x + self.block(x))

class EEG_Conv1D_GNN_Encoder(nn.Module):
    def __init__(self, input_time_length, output_features):
        super(EEG_Conv1D_GNN_Encoder, self).__init__()
        self.feature_extractor = nn.Sequential(
            nn.Conv1d(1, 64, kernel_size=5, stride=1, padding=2),
            nn.ReLU(),
            ResidualBlock3Conv(64),
            nn.Conv1d(64, 128, kernel_size=3, stride=2, padding=2),
            nn.ReLU(),
            ResidualBlock3Conv(128, kernel_size=3),
            nn.Conv1d(128, 256, kernel_size=3, stride=2, padding=2),
            nn.ReLU(),
            ResidualBlock3Conv(256, kernel_size=3),
            nn.Conv1d(256, 512, kernel_size=3, stride=2, padding=2),
            nn.ReLU(),
            nn.AdaptiveAvgPool1d(1),  # Reduces to [batch * channels, 512, 1]
        )
        self.fc = nn.Linear(512, output_features)

    def forward(self, x):
        # x: [batch, channels, time]
        batch_size, channels, time = x.shape
        x = x.view(-1, 1, time)                  # [batch * channels, 1, time]
        x = self.feature_extractor(x)            # [batch * channels, 512, 1]
        x = x.view(batch_size * channels, -1)    # [batch * channels, 512]
        x = self.fc(x)                           # [batch * channels, output_features]
        x = x.view(batch_size, channels, -1)     # [batch, channels, output_features]
        return x
    
class EEG_Conv1D(nn.Module):
    def __init__(self, input_channels, output_features):
        super(EEG_Conv1D, self).__init__()

        self.conv1 = nn.Conv1d(input_channels, 512, kernel_size=5, stride=1, padding=2)
        self.bn1 = nn.BatchNorm1d(512)
        self.drop = nn.Dropout(.5)
        self.relu1 = nn.ReLU()
        self.res1 = ResidualBlock3Conv(512)

        self.global_pool = nn.AdaptiveAvgPool1d(1)
        self.dropout = nn.Dropout(p=0.5)
        self.fc = nn.Linear(512, 128)

        self.dropout2 = nn.Dropout(p=0.5)
        self.fc2 = nn.Linear(128, output_features)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.drop(x)
        x = self.relu1(x)
        x = F.normalize(x, p=1, dim=1)  # L2 norm
        x = self.res1(x)
        x = F.normalize(x, p=1, dim=1)

        x = self.global_pool(x)
        x = x.squeeze(-1)
        x = self.dropout(x)
        x = self.fc(x)
        x = F.normalize(x, p=1, dim=1)  # L2 normalize after FC
        x = self.dropout2(x)
        x = self.fc2(x)
        x = F.normalize(x, p=1, dim=1)  # Final output normalization

        return x

class EEG_GNN(nn.Module):
    def __init__(self, input_dim, hidden_dim, num_classes):
        super(EEG_GNN, self).__init__()
        self.conv1 = GCNConv(input_dim, hidden_dim)
        self.conv2 = GCNConv(hidden_dim, hidden_dim)
        self.classifier = nn.Linear(hidden_dim, num_classes)

    def forward(self, x, edge_index, batch):
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = self.conv2(x, edge_index)
        x = F.relu(x)
        x = global_mean_pool(x, batch)  # Pool to graph-level
        return self.classifier(x)

from torch.utils.data import Dataset

class EEGDataset(Dataset):
    def __init__(self, X, y):
        self.X = torch.tensor(X, dtype=torch.float32)  # [N, C, T]
        self.y = torch.tensor(y, dtype=torch.long).squeeze()

    def __len__(self):
        return len(self.X)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

data = np.load("eeg_dataset.npz")
X = data["X"]  # shape: [N, C, T]
y = data["y"]  # shape: [N] or [N, 1]
if y.min() != 0:
    y = y - y.min()  # shift to start from 0

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from torch_geometric.loader import DataLoader as GeometricLoader
from torch.utils.data import Dataset, DataLoader
from torch_geometric.data import Data
from torch_geometric.nn import GCNConv, global_mean_pool
from sklearn.neighbors import NearestNeighbors


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# === Train/Val Split ===
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

train_dataset = EEGDataset(X_train, y_train)
val_dataset = EEGDataset(X_val, y_val)

train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=128, shuffle=False)

temp = EEG_Conv1D(input_channels=X.shape[2], output_features=128)
temp.load_state_dict(torch.load('cnn_head.pth'))

cnn_encoder = nn.Sequential(*list(temp.children())[:1])
for param in cnn_encoder.parameters():
    param.requires_grad = False
gnn_model = EEG_GNN(input_dim=64, hidden_dim=128, num_classes=len(np.unique(y))).to(device)

optimizer = torch.optim.Adam(list(gnn_model.parameters()), lr=1e-2)
loss_fn = nn.CrossEntropyLoss()

train_losses = []
val_losses = []
train_accuracies, val_accuracies = [], []

for epoch in range(10):
    #cnn_encoder.train()
    gnn_model.train()
    total_train_loss = 0
    correct_train = 0
    total_train_samples = 0

    for eeg_batch, labels in train_loader:
        eeg_batch = eeg_batch.to(device)
        labels = labels.to(device)
        features = cnn_encoder(eeg_batch)

        graph_list = [create_graph_from_cnn_features(features[i], labels[i].item(), k=4)
                      for i in range(features.size(0))]

        graph_batch = GeometricLoader(graph_list, batch_size=len(graph_list))
        for batch in graph_batch:
            batch = batch.to(device)
            out = gnn_model(batch.x, batch.edge_index, batch.batch)
            loss = loss_fn(out, batch.y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            total_train_loss += loss.item()
            preds = out.argmax(dim=1)
            correct_train += (preds == batch.y).sum().item()
            total_train_samples += batch.y.size(0)

    train_losses.append(total_train_loss / total_train_samples)
    train_accuracy = correct_train / total_train_samples

    # === Validation ===
    cnn_encoder.eval()
    gnn_model.eval()
    total_val_loss = 0
    correct_val = 0
    total_val_samples = 0

    with torch.no_grad():
        for eeg_batch, labels in val_loader:
            eeg_batch = eeg_batch.to(device)
            labels = labels.to(device)
            features = cnn_encoder(eeg_batch)

            graph_list = [create_graph_from_cnn_features(features[i], labels[i].item(), k=4)
                          for i in range(features.size(0))]

            graph_batch = GeometricLoader(graph_list, batch_size=len(graph_list))
            for batch in graph_batch:
                batch = batch.to(device)
                out = gnn_model(batch.x, batch.edge_index, batch.batch)
                loss = loss_fn(out, batch.y)

                total_val_loss += loss.item()
                preds = out.argmax(dim=1)
                correct_val += (preds == batch.y).sum().item()
                total_val_samples += batch.y.size(0)

    val_losses.append(total_val_loss / total_val_samples)
    val_accuracy = correct_val / total_val_samples
    train_accuracies.append(train_accuracy)
    val_accuracies.append(val_accuracy)

    print(f"Epoch {epoch+1}: Train Loss = {total_train_loss:.4f}, Acc = {train_accuracy:.4f} | "
          f"Val Loss = {total_val_loss:.4f}, Acc = {val_accuracy:.4f}")

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(train_losses, label="Train Loss")
plt.plot(val_losses, label="Val Loss")
plt.title("Loss over Epochs")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(train_accuracies, label="Train Acc")
plt.plot(val_accuracies, label="Val Acc")
plt.title("Accuracy over Epochs")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()

plt.tight_layout()
plt.show()

torch.save(cnn_encoder.state_dict(), 'cnn_encoder.pth')
torch.save(gnn_model.state_dict(), 'gnn_model.pth')           